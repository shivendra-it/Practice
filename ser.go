package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

/*
  type AutoGenerated struct {
  		FirstName string `json:"firstName"`
  		LastName string `json:"lastName"`
  		Age int `json:"age"`
  }


   data := AutoGenerated{}
   data.LastName = "Apple2"
   data.FirstName = "Apple1"
   data.Age = 20
   i,_ := json.Marshal(data)

 fmt.Println(string(i))
 //data,err := json.Marshal(i)


*/

/*
 type AutoGenerated struct {
 	Accounting []struct {
 		FirstName string `json:"firstName"`
 		LastName string `json:"lastName"`
 		Age int `json:"age"`
 	} `json:"accounting"`
 	Sales []struct {
 		FirstName string `json:"firstName"`
 		LastName string `json:"lastName"`
 		Age int `json:"age"`
 	} `json:"sales"`
 }



   a := AutoGenerated{}
   a.Accounting = make([]Accounting, 1) // create the slice of appropriate length
   // append values to it
   a.Accounting = append(a.Accounting, Accounting{"firstname", "lastname", 30})
   a.Sales = make([]Sales, 2)
   a.Sales = append(a.Sales, Sales{"first", "last", 40})

*/

/*

type AutoGenerated struct {
 Accounting []Account `json:"accounting"`
 Sales []Sale `json:"sales"`
}

// defined separately for better readability
type Account struct {
    FirstName string `json:"firstName"`
    LastName string `json:"lastName"`
    Age int `json:"age"`
}


type Sale struct{
   FirstName string `json:"firstName"`
   LastName string `json:"lastName"`
   Age int `json:"age"`
}


  a := AutoGenerated{}
a.Accounting = make([]Account, 0) // create the slice of appropriate length
// append values to it
a.Accounting = append(a.Accounting, Account{"ACfirst", "AClast", 30})

a.Sales = make([]Sale, 0) // create the slice of appropriate length
// append values to it
a.Sales = append(a.Sales, Sale{"slefirst", "slelast", 20})

*/

/*

type Auto struct {
	Origin string `json:"origin"`
	Flightno string `json:"flightno"`
	Farebasis string `json:"farebasis"`
	Ibibopartner string `json:"ibibopartner,omitempty"`
	Tickettype string `json:"tickettype"`
	Destination string `json:"destination"`
	Carrierid string `json:"carrierid"`
	Bookingclass string `json:"bookingclass"`
	Depdate string `json:"depdate"`
	Arrdate string `json:"arrdate"`
}


s := string(jsonbody)
fmt.Println(s)
a := [2]Auto{}
json.Unmarshal(jsonbody, &a)
fmt.Println(a[0].Flightno)
fmt.Println(a[1].Flightno)


*/

/*
JSONStringToStructure error
convert json string to given struct

func JSONStringToStructure(jsonString string, structure interface{}) error {
    jsonBytes := []byte(jsonString)
    return json.Unmarshal(jsonBytes, structure)
}


func StructureToJSON(structure interface{}) (string, error) {
    bin, err := json.Marshal(structure)
    return string(bin), err
}


*/

func handler(w http.ResponseWriter, r *http.Request) {

	jsonbody, _ := ioutil.ReadAll(r.Body)
	r.Body.Close()

	s := string(jsonbody)
	fmt.Println(s)

	//a,_ := json.Marshal(data)
	//fmt.Println(string(i))

}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8081", nil)
}
